{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-12T15:07:20.799271Z",
     "start_time": "2020-03-12T15:07:20.791689Z"
    }
   },
   "outputs": [],
   "source": [
    "# https://archive.ics.uci.edu/ml/datasets/ISOLET\n",
    "\n",
    "import pandas as pd\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "\n",
    "def __get_raw_voice_data():\n",
    "    # IMPORT DATA AND MAKE FIRST COLUMN LABEL\n",
    "    data_train = pd.read_csv('input/voice/isolet1+2+3+4.data', header=None)\n",
    "    data_test = pd.read_csv('input/voice/isolet5.data', header=None)\n",
    "    data = data_train.append(data_test).reset_index().drop(columns=['index'])\n",
    "    data_label = data[617]\n",
    "    data = data.drop(columns = [617])\n",
    "    data.insert(0, 'label', data_label)\n",
    "    return data\n",
    "\n",
    "\n",
    "\n",
    "def get_voice_data():\n",
    "    data = __get_raw_voice_data()\n",
    "\n",
    "\n",
    "    scaler = StandardScaler()\n",
    "    pca = PCA()\n",
    "\n",
    "    X = data.iloc[:,1:]\n",
    "    y = data.iloc[:,0]\n",
    "\n",
    "    X = scaler.fit(X)\n",
    "    X = scaler.transform(X)\n",
    "\n",
    "    X = pca.fit(X)\n",
    "    X = pca.transform(X)\n",
    "\n",
    "    return(X.insert(0, 'label', y))\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-12T15:07:22.568592Z",
     "start_time": "2020-03-12T15:07:21.678972Z"
    }
   },
   "outputs": [],
   "source": [
    "data = __get_raw_voice_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-12T15:07:25.888861Z",
     "start_time": "2020-03-12T15:07:25.885979Z"
    }
   },
   "outputs": [],
   "source": [
    "scaler = StandardScaler()\n",
    "pca = PCA()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-12T15:08:23.262045Z",
     "start_time": "2020-03-12T15:08:22.499940Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-9.41954680e+00,  4.59947432e-01, -7.28877647e+00, ...,\n",
       "        -2.51336993e-03,  1.41328320e-04, -3.84852808e-03],\n",
       "       [-5.12472771e+00, -1.29713082e+00, -7.83794224e+00, ...,\n",
       "         7.18619462e-03, -9.83094142e-03, -8.79309043e-04],\n",
       "       [-1.34003315e+01,  1.89319021e+00, -1.38958777e+01, ...,\n",
       "         3.16938013e-03, -1.10290415e-02,  3.79980570e-02],\n",
       "       ...,\n",
       "       [ 8.74739933e+00, -1.00326082e+00, -4.59571152e+00, ...,\n",
       "        -2.15583014e-03,  4.80993833e-04,  6.93731580e-03],\n",
       "       [-1.63938621e+01,  3.48123473e+00,  8.12071516e+00, ...,\n",
       "         2.26875173e-02, -1.86994478e-02, -3.18665213e-02],\n",
       "       [-1.65730042e+01, -1.36791895e+00,  8.08999795e+00, ...,\n",
       "        -2.62875270e-02, -5.64217527e-02,  1.22715436e-02]])"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = data.iloc[:,1:]\n",
    "scaler.fit(X)\n",
    "X = scaler.transform(X)\n",
    "pca.fit(X)\n",
    "X = pca.transform(X)\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-12T15:09:23.697766Z",
     "start_time": "2020-03-12T15:09:23.360967Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x125d8c4c0>]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "plt.plot(np.cumsum(pca.explained_variance_ratio_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-12T15:10:00.337076Z",
     "start_time": "2020-03-12T15:10:00.330462Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9754170931129732"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(pca.explained_variance_ratio_[:300])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-12T15:06:57.071459Z",
     "start_time": "2020-03-12T15:06:56.760414Z"
    }
   },
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "float() argument must be a string or a number, not 'StandardScaler'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-4-6ce1a37dcd81>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mscaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mscaler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpca\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/sklearn/preprocessing/_data.py\u001b[0m in \u001b[0;36mtransform\u001b[0;34m(self, X, copy)\u001b[0m\n\u001b[1;32m    791\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    792\u001b[0m         \u001b[0mcopy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcopy\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mcopy\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 793\u001b[0;31m         X = check_array(X, accept_sparse='csr', copy=copy,\n\u001b[0m\u001b[1;32m    794\u001b[0m                         \u001b[0mestimator\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mFLOAT_DTYPES\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    795\u001b[0m                         force_all_finite='allow-nan')\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, warn_on_dtype, estimator)\u001b[0m\n\u001b[1;32m    529\u001b[0m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcasting\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"unsafe\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    530\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 531\u001b[0;31m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    532\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mComplexWarning\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    533\u001b[0m                 raise ValueError(\"Complex data not supported\\n\"\n",
      "\u001b[0;32m/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/numpy/core/_asarray.py\u001b[0m in \u001b[0;36masarray\u001b[0;34m(a, dtype, order)\u001b[0m\n\u001b[1;32m     83\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     84\u001b[0m     \"\"\"\n\u001b[0;32m---> 85\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     86\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     87\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mTypeError\u001b[0m: float() argument must be a string or a number, not 'StandardScaler'"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "y = data.iloc[:,0]\n",
    "\n",
    "X = scaler.fit(X)\n",
    "X = scaler.transform(X)\n",
    "\n",
    "X = \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-12T15:15:42.585562Z",
     "start_time": "2020-03-12T15:15:42.550420Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>label</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>...</th>\n",
       "      <th>607</th>\n",
       "      <th>608</th>\n",
       "      <th>609</th>\n",
       "      <th>610</th>\n",
       "      <th>611</th>\n",
       "      <th>612</th>\n",
       "      <th>613</th>\n",
       "      <th>614</th>\n",
       "      <th>615</th>\n",
       "      <th>616</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-9.419547</td>\n",
       "      <td>0.459947</td>\n",
       "      <td>-7.288776</td>\n",
       "      <td>4.110508</td>\n",
       "      <td>-6.179064</td>\n",
       "      <td>-1.794985</td>\n",
       "      <td>-0.001060</td>\n",
       "      <td>3.682690</td>\n",
       "      <td>2.262369</td>\n",
       "      <td>...</td>\n",
       "      <td>0.018486</td>\n",
       "      <td>-0.009639</td>\n",
       "      <td>0.016007</td>\n",
       "      <td>0.008309</td>\n",
       "      <td>-0.003537</td>\n",
       "      <td>-0.006566</td>\n",
       "      <td>0.001788</td>\n",
       "      <td>-0.002513</td>\n",
       "      <td>0.000141</td>\n",
       "      <td>-0.003849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "      <td>-5.124728</td>\n",
       "      <td>-1.297131</td>\n",
       "      <td>-7.837942</td>\n",
       "      <td>2.811276</td>\n",
       "      <td>-2.980114</td>\n",
       "      <td>-3.179390</td>\n",
       "      <td>-3.616721</td>\n",
       "      <td>-1.658861</td>\n",
       "      <td>0.993507</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.020313</td>\n",
       "      <td>-0.018936</td>\n",
       "      <td>-0.004896</td>\n",
       "      <td>-0.018080</td>\n",
       "      <td>-0.009387</td>\n",
       "      <td>0.000819</td>\n",
       "      <td>0.000861</td>\n",
       "      <td>0.007186</td>\n",
       "      <td>-0.009831</td>\n",
       "      <td>-0.000879</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2.0</td>\n",
       "      <td>-13.400332</td>\n",
       "      <td>1.893190</td>\n",
       "      <td>-13.895878</td>\n",
       "      <td>2.957061</td>\n",
       "      <td>5.782542</td>\n",
       "      <td>0.652969</td>\n",
       "      <td>2.071214</td>\n",
       "      <td>1.461448</td>\n",
       "      <td>-1.367054</td>\n",
       "      <td>...</td>\n",
       "      <td>0.009000</td>\n",
       "      <td>-0.017440</td>\n",
       "      <td>0.003047</td>\n",
       "      <td>0.000473</td>\n",
       "      <td>0.005817</td>\n",
       "      <td>0.000333</td>\n",
       "      <td>-0.001330</td>\n",
       "      <td>0.003169</td>\n",
       "      <td>-0.011029</td>\n",
       "      <td>0.037998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.0</td>\n",
       "      <td>-11.478900</td>\n",
       "      <td>1.443731</td>\n",
       "      <td>-14.838258</td>\n",
       "      <td>2.796870</td>\n",
       "      <td>5.277471</td>\n",
       "      <td>-3.219668</td>\n",
       "      <td>3.712314</td>\n",
       "      <td>3.939993</td>\n",
       "      <td>-3.510095</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002425</td>\n",
       "      <td>-0.018405</td>\n",
       "      <td>0.016504</td>\n",
       "      <td>0.000975</td>\n",
       "      <td>0.008438</td>\n",
       "      <td>-0.008209</td>\n",
       "      <td>0.029114</td>\n",
       "      <td>-0.042079</td>\n",
       "      <td>-0.014172</td>\n",
       "      <td>0.014641</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3.0</td>\n",
       "      <td>-17.500799</td>\n",
       "      <td>5.514334</td>\n",
       "      <td>-0.654720</td>\n",
       "      <td>10.344152</td>\n",
       "      <td>-5.271242</td>\n",
       "      <td>1.209199</td>\n",
       "      <td>3.023300</td>\n",
       "      <td>6.356624</td>\n",
       "      <td>1.384076</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.042690</td>\n",
       "      <td>0.001892</td>\n",
       "      <td>0.025153</td>\n",
       "      <td>-0.032029</td>\n",
       "      <td>0.015441</td>\n",
       "      <td>-0.015064</td>\n",
       "      <td>0.028851</td>\n",
       "      <td>0.032945</td>\n",
       "      <td>0.007071</td>\n",
       "      <td>0.004017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7792</th>\n",
       "      <td>24.0</td>\n",
       "      <td>14.707349</td>\n",
       "      <td>-11.372000</td>\n",
       "      <td>0.654974</td>\n",
       "      <td>1.563333</td>\n",
       "      <td>2.054053</td>\n",
       "      <td>-2.544104</td>\n",
       "      <td>6.794802</td>\n",
       "      <td>3.986668</td>\n",
       "      <td>-4.932495</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.034156</td>\n",
       "      <td>-0.032746</td>\n",
       "      <td>-0.021018</td>\n",
       "      <td>0.016070</td>\n",
       "      <td>-0.022591</td>\n",
       "      <td>0.001468</td>\n",
       "      <td>0.002988</td>\n",
       "      <td>-0.003120</td>\n",
       "      <td>-0.005034</td>\n",
       "      <td>0.007067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7793</th>\n",
       "      <td>25.0</td>\n",
       "      <td>6.717087</td>\n",
       "      <td>-0.149503</td>\n",
       "      <td>-3.871648</td>\n",
       "      <td>8.442133</td>\n",
       "      <td>5.796434</td>\n",
       "      <td>-9.194105</td>\n",
       "      <td>5.127070</td>\n",
       "      <td>-7.893769</td>\n",
       "      <td>2.413103</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.025136</td>\n",
       "      <td>0.033431</td>\n",
       "      <td>-0.028316</td>\n",
       "      <td>-0.002437</td>\n",
       "      <td>0.005611</td>\n",
       "      <td>0.003583</td>\n",
       "      <td>-0.046574</td>\n",
       "      <td>-0.019395</td>\n",
       "      <td>-0.001716</td>\n",
       "      <td>0.003202</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7794</th>\n",
       "      <td>25.0</td>\n",
       "      <td>8.747399</td>\n",
       "      <td>-1.003261</td>\n",
       "      <td>-4.595712</td>\n",
       "      <td>7.339776</td>\n",
       "      <td>4.275228</td>\n",
       "      <td>-9.695636</td>\n",
       "      <td>5.500453</td>\n",
       "      <td>-3.941517</td>\n",
       "      <td>3.018535</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.015341</td>\n",
       "      <td>-0.002721</td>\n",
       "      <td>0.004757</td>\n",
       "      <td>0.003621</td>\n",
       "      <td>-0.024991</td>\n",
       "      <td>-0.007427</td>\n",
       "      <td>0.005933</td>\n",
       "      <td>-0.002156</td>\n",
       "      <td>0.000481</td>\n",
       "      <td>0.006937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7795</th>\n",
       "      <td>26.0</td>\n",
       "      <td>-16.393862</td>\n",
       "      <td>3.481235</td>\n",
       "      <td>8.120715</td>\n",
       "      <td>9.592064</td>\n",
       "      <td>0.299319</td>\n",
       "      <td>-3.764553</td>\n",
       "      <td>7.170642</td>\n",
       "      <td>9.854477</td>\n",
       "      <td>0.117928</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.018248</td>\n",
       "      <td>-0.010094</td>\n",
       "      <td>0.018333</td>\n",
       "      <td>-0.007989</td>\n",
       "      <td>0.006427</td>\n",
       "      <td>-0.005674</td>\n",
       "      <td>0.010534</td>\n",
       "      <td>0.022688</td>\n",
       "      <td>-0.018699</td>\n",
       "      <td>-0.031867</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7796</th>\n",
       "      <td>26.0</td>\n",
       "      <td>-16.573004</td>\n",
       "      <td>-1.367919</td>\n",
       "      <td>8.089998</td>\n",
       "      <td>10.556553</td>\n",
       "      <td>-2.325051</td>\n",
       "      <td>-4.107104</td>\n",
       "      <td>6.068470</td>\n",
       "      <td>6.183053</td>\n",
       "      <td>-3.215141</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.010021</td>\n",
       "      <td>-0.006397</td>\n",
       "      <td>0.015026</td>\n",
       "      <td>-0.029052</td>\n",
       "      <td>-0.012705</td>\n",
       "      <td>-0.003731</td>\n",
       "      <td>0.030285</td>\n",
       "      <td>-0.026288</td>\n",
       "      <td>-0.056422</td>\n",
       "      <td>0.012272</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7797 rows × 618 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      label          0          1          2          3         4         5  \\\n",
       "0       1.0  -9.419547   0.459947  -7.288776   4.110508 -6.179064 -1.794985   \n",
       "1       1.0  -5.124728  -1.297131  -7.837942   2.811276 -2.980114 -3.179390   \n",
       "2       2.0 -13.400332   1.893190 -13.895878   2.957061  5.782542  0.652969   \n",
       "3       2.0 -11.478900   1.443731 -14.838258   2.796870  5.277471 -3.219668   \n",
       "4       3.0 -17.500799   5.514334  -0.654720  10.344152 -5.271242  1.209199   \n",
       "...     ...        ...        ...        ...        ...       ...       ...   \n",
       "7792   24.0  14.707349 -11.372000   0.654974   1.563333  2.054053 -2.544104   \n",
       "7793   25.0   6.717087  -0.149503  -3.871648   8.442133  5.796434 -9.194105   \n",
       "7794   25.0   8.747399  -1.003261  -4.595712   7.339776  4.275228 -9.695636   \n",
       "7795   26.0 -16.393862   3.481235   8.120715   9.592064  0.299319 -3.764553   \n",
       "7796   26.0 -16.573004  -1.367919   8.089998  10.556553 -2.325051 -4.107104   \n",
       "\n",
       "             6         7         8  ...       607       608       609  \\\n",
       "0    -0.001060  3.682690  2.262369  ...  0.018486 -0.009639  0.016007   \n",
       "1    -3.616721 -1.658861  0.993507  ... -0.020313 -0.018936 -0.004896   \n",
       "2     2.071214  1.461448 -1.367054  ...  0.009000 -0.017440  0.003047   \n",
       "3     3.712314  3.939993 -3.510095  ... -0.002425 -0.018405  0.016504   \n",
       "4     3.023300  6.356624  1.384076  ... -0.042690  0.001892  0.025153   \n",
       "...        ...       ...       ...  ...       ...       ...       ...   \n",
       "7792  6.794802  3.986668 -4.932495  ... -0.034156 -0.032746 -0.021018   \n",
       "7793  5.127070 -7.893769  2.413103  ... -0.025136  0.033431 -0.028316   \n",
       "7794  5.500453 -3.941517  3.018535  ... -0.015341 -0.002721  0.004757   \n",
       "7795  7.170642  9.854477  0.117928  ... -0.018248 -0.010094  0.018333   \n",
       "7796  6.068470  6.183053 -3.215141  ... -0.010021 -0.006397  0.015026   \n",
       "\n",
       "           610       611       612       613       614       615       616  \n",
       "0     0.008309 -0.003537 -0.006566  0.001788 -0.002513  0.000141 -0.003849  \n",
       "1    -0.018080 -0.009387  0.000819  0.000861  0.007186 -0.009831 -0.000879  \n",
       "2     0.000473  0.005817  0.000333 -0.001330  0.003169 -0.011029  0.037998  \n",
       "3     0.000975  0.008438 -0.008209  0.029114 -0.042079 -0.014172  0.014641  \n",
       "4    -0.032029  0.015441 -0.015064  0.028851  0.032945  0.007071  0.004017  \n",
       "...        ...       ...       ...       ...       ...       ...       ...  \n",
       "7792  0.016070 -0.022591  0.001468  0.002988 -0.003120 -0.005034  0.007067  \n",
       "7793 -0.002437  0.005611  0.003583 -0.046574 -0.019395 -0.001716  0.003202  \n",
       "7794  0.003621 -0.024991 -0.007427  0.005933 -0.002156  0.000481  0.006937  \n",
       "7795 -0.007989  0.006427 -0.005674  0.010534  0.022688 -0.018699 -0.031867  \n",
       "7796 -0.029052 -0.012705 -0.003731  0.030285 -0.026288 -0.056422  0.012272  \n",
       "\n",
       "[7797 rows x 618 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.DataFrame(X)\n",
    "data\n",
    "data.insert(0, 'label', y)\n",
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-12T15:24:38.776169Z",
     "start_time": "2020-03-12T15:24:12.218728Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "lr = LogisticRegression(max_iter=1000)\n",
    "lr.fit(X, y)\n",
    "probas = lr.predict_proba(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-12T15:27:58.558417Z",
     "start_time": "2020-03-12T15:27:58.550093Z"
    }
   },
   "outputs": [],
   "source": [
    "from scipy.stats import entropy\n",
    "entropies = entropy(probas, axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-12T15:28:05.801755Z",
     "start_time": "2020-03-12T15:28:05.594116Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([6.849e+03, 6.100e+02, 2.270e+02, 7.200e+01, 2.400e+01, 9.000e+00,\n",
       "        5.000e+00, 0.000e+00, 0.000e+00, 1.000e+00]),\n",
       " array([7.73470343e-10, 6.47773614e-02, 1.29554722e-01, 1.94332083e-01,\n",
       "        2.59109443e-01, 3.23886804e-01, 3.88664165e-01, 4.53441525e-01,\n",
       "        5.18218886e-01, 5.82996247e-01, 6.47773607e-01]),\n",
       " <a list of 10 Patch objects>)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(entropies)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-03-12T15:28:17.691652Z",
     "start_time": "2020-03-12T15:28:17.685881Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6477736072024265"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max(entropies)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
